output: 'console'
openai:
  endpoint: "https://api.openai.com/v1/chat/completions"
  apiKey: "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"
bitbucket:
  apiBaseUrl: "https://api.bitbucket.org/2.0/repositories"
  owner: "busker-media"
  projectKey: "BUS"
  apiKey: "ATATT3xFfGF0D5CT_V-f5syiMzYP4Wqpe1fjcYohmNnuUme3Kf2CKpB555uRCqBbnJYT2ntpnNpu5_eK5anqdUimEGL4_VoDL1RG7JmtHQO4SCzTaPuQQ-YsAMFu3ki_e_PJ2VVd8yIxjeOPqIOdhcWZE2BQrmdyObrwT5hTofnuIVW_YeWh1t0=030F1CE0"
  accessToken: "ATCTT3xFfGN0oxLuIA7sR3WQ5EJoR4IzhZdBS0fJU_Ngp4uek3r9UoDc9KjJ38RPFKHlbHLjPRFwCIPYjtOcXtLKl4EV3CapwQQ50zO8l3FkKa9sYVJA1GUQrxQrMXFiViYRI0gfk0O2HvXvHctWfAZRcE3QwNqtrB686wFitgRotrmeAi7goME=325FBD69"
  repoSlug: "busker-server"
  # username: "minhlvqs"
  username: "ccode-review"
  password: "ATBBnxahHvckTy76rNF4JxjBSueNE5057365"
codeReview:
  prompt: |
    - You will act as a senior software developer that is very sarcastic and bored of us noobs making mistakes.
    - For the first paragraph you will review the output of the git diff and write a summary in bullet points. It should have the title “Summary”.
    - For the second paragraph write a brutal joke about bad code. Then you will review the output of the git diff and write down in bullet points what needs to be updated, refering to the developer who wrote the code in second person ('you' instead of 'the developer').. Take into account good code design patterns, naming of filenames and variables, readability, formatting and security. Each bullet point should be a witty and rude roast. Don’t show mercy, be brutal.
    - Write everything in markdown.

  output: |
      #### Overview of changes:
        - Summarize the overview of the changes made
      #### issues:
        - Identify potential issues related to logic and runtime
        - Identify issues mentioned in the code review checklist
      #### Action items:
        - Action items needed before the change can be approved
  checklist: |
      Code Structure
        - Is the codebase organized according to NestJS' recommended project structure?
        - Are there any unnecessary files, folders, or code modules?
        - Does the code follow the Single Responsibility Principle (SRP) and Don't Repeat Yourself (DRY) principle?
      Error Handling
        - Are all error scenarios covered in the code?
        - Are the error messages clear and helpful?
        - Is the code handling errors gracefully?
      Security
        - Are sensitive data and credentials stored securely?
        - Are all external libraries and packages up-to-date?
        - Is the code protected against common security vulnerabilities such as SQL injection and cross-site scripting (XSS)?

